<?php
declare(strict_types=1);

namespace gift\test\services\box;
require_once __DIR__ . '/../../../src/vendor/autoload.php';

use Faker\Factory;
use gift\app\models\Box;
use gift\app\models\Prestation;
use gift\app\services\box\BoxService;
use gift\app\services\box\BoxServiceInvalidDataException;
use gift\app\services\utils\Eloquent;
use PHPUnit\Framework\Attributes\Depends;
use PHPUnit\Framework\TestCase;

final class BoxServiceTest extends TestCase
{
    private static array $boxIds = [];
    private static array $prestations = [];

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        Eloquent::init(__DIR__ . '/../../../src/conf/gift.db.test.ini');
        $faker = Factory::create('fr_FR');

        for ($i = 1; $i <= 4; $i++) {
            $p = Prestation::create([
                'id' => $faker->uuid(),
                'libelle' => $faker->word(),
                'description' => $faker->paragraph(3),
                'tarif' => $faker->randomFloat(2, 20, 200),
                'unite' => $faker->numberBetween(1, 3)
            ]);
            self::$prestations[] = $p;
        }
        foreach (self::$prestations as $prestation) {
            $prestation->save();
        }
    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDownAfterClass(); // TODO: à vérifier

        foreach (self::$boxIds as $boxId) {
            Box::destroy($boxId);
        }

        foreach (self::$prestations as $prestation) {
            $prestation->delete();
        }
    }


    //A vérifier
    public function testDeletePresta()
    {
        // Create a mock Box instance
        $boxId = 'box_id';
        $prestaId = 'presta_id';
        $boxMock = $this->getMockBuilder(Box::class)
            ->disableOriginalConstructor()
            ->getMock();
        $boxMock->expects($this->once())
            ->method('prestations')
            ->willReturnSelf();
        $boxMock->expects($this->once())
            ->method('detach')
            ->with($prestaId);
        $boxMock->expects($this->once())
            ->method('save')
            ->willReturnSelf();

        // Set the mock Box instance in the BoxService
        $this->boxService->box = $boxMock;

        // Call the method to be tested
        $result = $this->boxService->deletePresta($boxId, $prestaId);

        // Assert the result
        $this->assertEquals($boxMock, $result);
    }

    //TODO à vérifier
    public function testCreateBoxEmpty(): string
    {
        $service = new BoxService();
        $faker = Factory::create('fr_FR');

        $libelle = $faker->word();
        $desc = $faker->paragraph(3);
        $box_data['libelle'] = $libelle;
        $box_data['description'] = $desc;
        $box_data['kdo'] = 0;

        $box = $service->createEmptyBox($box_data);
        $this->assertIsArray($box);
        $this->assertArrayHasKey('id', $box);
        $this->assertIsString($box['id']);

        $box_inserted = Box::findOrFail($box['id']);
        self::$boxIds[] = $box_inserted->id;

        $this->assertArrayHasKey('libelle', $box);
        $this->assertArrayHasKey('token', $box);
        $this->assertArrayHasKey('description', $box);
        $this->assertArrayHasKey('message_kdo', $box);
        $this->assertArrayHasKey('statut', $box);
        $this->assertArrayHasKey('montant', $box);

        $this->assertSame($libelle, $box['libelle']);
        $this->assertSame($desc, $box['description']);
        $this->assertSame('', $box['message_kdo']);

        $this->assertIsString($box['token']);
        $this->assertGreaterThan(32, strlen($box['token']));
        $this->assertSame($box_inserted->token, $box['token']);

        $this->assertSame(Box::CREATED, $box['statut']);
        $this->assertSame($box['statut'], $box_inserted->statut);
        $this->assertEquals(0, $box['montant']);
        $this->assertEquals($box['montant'], $box_inserted->montant);

        $this->assertEquals(0, $box_inserted->prestations()->count());

        return $box['id'];
    }

    /**
     * @throws BoxServiceInvalidDataException
     */
    #[Depends('testCreateBoxEmpty')]
    public function testAddPrestationToBox(string $boxId): void
    {

        $service = new BoxService();
        $service->addPresta($boxId, self::$prestations[0]->id, 1);
        $updatedBox = Box::findOrFail($boxId);

        $this->assertEquals(1, $updatedBox->prestations()->count());
        $this->assertEquals(self::$prestations[0]->id, $updatedBox->prestations()->first()->id);
        $this->assertEquals(1, $updatedBox->prestations()->first()->contenu->quantite);
        $this->assertEquals(self::$prestations[0]->tarif, $updatedBox->montant);

        $montant_before = $updatedBox->montant;

        $service->addPresta($boxId, self::$prestations[1]->id, 2);
        $updatedBox = Box::findOrFail($boxId);

        $this->assertEquals(2, $updatedBox->prestations()->count());
        $this->assertEquals(self::$prestations[1]->id, $updatedBox->prestations()->get()[1]->id);
        $this->assertEquals(2, $updatedBox->prestations()->get()[1]->contenu->quantite);
        $this->assertEquals($montant_before + 2 * self::$prestations[1]->tarif, $updatedBox->montant);
    }

    #[Depends('testCreateBoxEmpty')]
    public function testGetBox(string $id): void
    {
        $service = new BoxService();
        $box = $service->getBoxById($id);
        $this->assertIsArray($box);
        $this->assertArrayHasKey('id', $box);
        $this->assertEquals($box['id'], $id);

        $box_inserted = Box::findOrFail($box['id']);
        self::$boxIds[] = $box_inserted->id;

        $this->assertArrayHasKey('libelle', $box);
        $this->assertEquals($box['libelle'], $box_inserted->libelle);

        $this->assertArrayHasKey('token', $box);
        $this->assertEquals($box['token'], $box_inserted->token);

        $this->assertArrayHasKey('description', $box);
        $this->assertEquals($box['description'], $box_inserted->description);

        $this->assertArrayHasKey('statut', $box);
        $this->assertEquals($box['statut'], $box_inserted->statut);
    }

}